; Please see https://github.com/pbatard/AltInput/blob/master/README.md for
; details on how to modify this file, especially with regards to identifying
; your controller's buttons and the actions that can be specified.

[global]
; The version of the AltInput syntax used by this config file
Version                = 1.4

[input1]
; To find the name you should use below, make sure you have AltInput loaded
; and then check the Detected Controller list when entering flight mode.
; Whether your controller is configured or not, you should see something like:
;  AltInput: Detected Controller 'Microsoft SideWinder Precision Pro (USB)' ...
; If desired, you can use only part of the name in the input section, in which
; case that section will apply to all devices that have that part in their name.
Name                  = Microsoft SideWinder Precision Pro
; This should be set to 'DirectInput'
Interface             = DirectInput
; This should be set to 'GameControl'
Class                 = GameControl
; You can tell AltInput to ignore this entry altogether by uncommenting this:
;Ignore                = true
; Default dead zone of the axes, in the range 0.0 through 1.0, where 0.0
; indicates that there is no dead zone, 0.5 indicates that the dead
; zone extends over 50 percent of the physical range of the axis and 1.0
; indicates that the entire physical range of the axis is dead. For regular
; axes, the dead zone is applied to the center. For sliders, to the edges.
DeadZone              = 0.1
; Factor by which to multiply an axis data, a.k.a 'sensitivity'. This can be
; overridden for each individual axis. Defaults to 1.0 if not specified.
;Factor                = 1.0
; Override the slider deadzone, as KSP seems to see the throttle as active
; even if it has a very low value (such as 1E-5).
Silder1.DeadZone      = 0.01
Slider1.Inverted      = true
Slider1.Factor        = 0.99
; RZ is a bit too sensitive on my old joystick...
RotationZ.DeadZone    = 0.15

; Mappings for each game mode. For now, these can be 'Flight', 'AltFlight'
; or 'Ground'. If no mode section is specified, 'Flight' is assumed.
[input1.Flight]
; List of axes for this controller
AxisX                 = yaw
AxisY                 = pitch
RotationZ             = roll
Slider1               = mainThrottle
; List of POVs for this controler
; When an axis is being used, as opposed to a button action, a number
; needs to be specified in brackets, indicating the value (-1.0 to 1.0)
; that the axis should take when this POV position is reached.
; You can also append '.Delta' to the action (on the right part) if you want
; to specify the delta by which the value should be increased from its
; current value, instead of an absolute value. See further for an example.
POV1.Up               = Y [+1.0]
POV1.Down             = Y [-1.0]
POV1.Left             = X [-1.0]
POV1.Right            = X [+1.0]
; List of Buttons
Button1               = switchMode
Button2               = toggleLights
Button3               = switchView
Button4               = toggleMapView
Button5               = Z [+1.0]
Button6               = Z [-1.0]
Button7               = toggleSAS
Button8               = toggleRCS
Button9               = activateStaging

; Alternate flight mode
[input1.AltFlight]
Button2               = toggleGears
Button5               = increaseWarp
Button6               = decreaseWarp
Button8               = toggleBrakes

; Controls for post landing/splashing
[input1.Ground]
AxisX                 = wheelSteer
AxisX.Inverted        = true
Slider1               = wheelThrottle
Button2               = activateBrakes
Button5               = wheelThrottle.Delta [-0.1]
Button6               = wheelThrottle.Delta [+0.1]
Button8               = toggleBrakes

[input2]
Name                  = XBOX 360 For Windows
Interface             = DirectInput
Class                 = GameControl
DeadZone              = 0.1
; Increase dead zone, so that we don't accidentally toggle RCS/SAS while throttling
AxisX.DeadZone        = 0.7
; Use X left and right as a button emulation for RCS/SAS toggle
AxisX.Min             = toggleRCS
AxisX.Max             = toggleSAS
; By default, when an Axis is set to act as a button (i.e. a '.Max' or '.Min' action
; is defined), then the action will only triggered once when the controller crosses 
; the dead zone.
; If instead you want the action to be repeated for as long as the axis is outside
; its dead zone, then you should set the '.Continuous' attribute.
; Also not that if a .Delta is used, the actual value being applied in continuous
; mode will be proportional to how much the axis is moved.
AxisY.Continuous      = true
AxisY.Inverted        = true
AxisY.Max             = mainThrottle.Delta [+0.01]
AxisY.Min             = mainThrottle.Delta [-0.01]
RotationX             = yaw
RotationY             = pitch
AxisZ                 = roll
AxisZ.Inverted        = true
POV1.Up               = Y [1.0]
POV1.Down             = Y [-1.0]
POV1.Left             = X [-1.0]
POV1.Right            = X [1.0]
Button1               = toggleBrakes
Button2               = toggleGears
Button3               = Z [+1.0]
Button4               = Z [-1.0]
Button5               = decreaseWarp
Button6               = increaseWarp
Button7               = switchView
Button8               = toggleMapView
Button9               = toggleNavBall
Button10              = activateStaging