[global]
; The version of the AltInput syntax used by this config file
Version            = 1.1

[input1]
; This should be set to 'DirectInput'
Interface          = DirectInput
; This should be set to 'GameControl'
Class              = GameControl
; If you have multiple controllers, you can use the 'Name' attribute
; to assign an input section to a specific controller.
; To find the name you should use here, comment out this section and run
; the game with your controller plugged in, then look for a line like
; this in the debug log:
;  AltInput: Added controller 'Microsoft SideWinder Precision Pro  (USB)'
; Note that you can truncate the name, in which case the input section
; will apply to any controller that start with this name.
Name               = Microsoft SideWinder Precision Pro
; You can tell AltInput to ignore this entry altogether by uncommenting this
;Ignore            = true
; Default dead zone of the axes, in the range 0 through 10,000, where 0
; indicates that there is no dead zone, 5,000 indicates that the dead
; zone extends over 50 percent of the physical range of the axis and 10,000
; indicates that the entire physical range of the axis is dead. For regular
; axes, the dead zone applies to the center or, for sliders, to the edges.
DeadZone           = 1000
; Override the slider deadzone, as KSP seems to see the throttle as active
; even if it has a very low value (such as 1E-5). Applies to the edges.
Silder1.DeadZone   = 10
RotationZ.DeadZone = 1500
Slider1.Inverted   = true

; Mappings for each game mode. For now, these can be 'Flight', 'EVA' or
; 'Rover'. If no mode is specified, 'Flight' is assumed.
[input1.Flight]
; List of axes for this controller
AxisX              = yaw
AxisY              = pitch
RotationZ          = roll
Slider1            = mainThrottle
; List of POVs for this controler
; When an axis is being used, as opposed to a button action, a number
; needs to be specified in brackets, indicating the value (-1.0 to 1.0)
; that the axis should take when this POV position is reached.
; You can also append '.Delta' if you want to specify the delta by which
; the value should be increased from its current value, instead of an
; absolute value.
POV1.Up            = Y [1.0]
POV1.Down          = Y [-1.0]
POV1.Left          = X [-1.0]
POV1.Right         = X [1.0]
; List of Buttons
Button1            = activateLanded
Button2            = toggleGears
Button3            = switchView
Button4            = toggleMapView
Button5            = Z [1.0]
Button6            = Z [-1.0]
Button7            = toggleSAS
Button8            = toggleRCS
Button9            = activateStaging

[input1.Landed]
AxisX              = wheelSteer
AxisX.Inverted     = true
Slider1            = wheelThrottle
Button1            = activateFlight
Button2            = activateBrakes
Button3            = switchView
Button4            = toggleMapView
Button5            = wheelThrottle.Delta [-0.1]
Button6            = wheelThrottle.Delta [0.1]
Button9            = activateStaging

[input1.EVA]
AxisX              = strafeSpeed
AxisY              = walkSpeed
Slider1            = jetThrottle
Button1            = toggleJetpack
RotationZ          = turnRate
Button3            = switchView
Button4            = toggleMapView

